name: Deploy to Neocities

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-to-neocities
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Generate fresh updates.json from last 20 commits (base 1933 + total commits)
      - name: Generate updates.json
        env:
          TZ: America/Los_Angeles
        run: |
          BASE=1933      # 2003 total updates âˆ’ 70 commits
          MAX=20

          TOTAL_COMMITS=$(git rev-list --count HEAD)
          TOP=$(( BASE + TOTAL_COMMITS ))

          echo "[" > updates.json
          i=0

          git log -n $MAX --pretty=format:'%h%x1f%s%x1f%ci' | \
          while IFS=$'\x1f' read -r sha subj date_raw; do
            num=$(( TOP - i ))

            # 1) Split on first pipe "|" if present, else fallback to auto-title
            if [[ "$subj" == *"|"* ]]; then
              title=${subj%%|*}
              message=${subj#*|}
            else
              title="Update #$num"
              message="$subj"
            fi

            # format date and time separately
            date_fmt=$(date -d "$date_raw" +"%B-%-d-%Y")
            time_fmt=$(date -d "$date_raw" +"%-l:%M %p")

            # escape quotes
            title=${title//\"/\\\"}
            message=${message//\"/\\\"}

            entry="{\"sha\":\"$sha\",\"number\":$num,\"title\":\"$title\",\"message\":\"$message\",\"date\":\"$date_fmt\",\"time\":\"$time_fmt\"}"

            if [[ $i -gt 0 ]]; then
              echo "," >> updates.json
            fi
            echo "$entry" >> updates.json
            i=$(( i + 1 ))
          done

          echo "]" >> updates.json
          echo "Generated updates.json with $i entries, newest #$TOP at ${date_fmt} ${time_fmt}."
        shell: bash

      # Download current RSS and update it
      - name: Update RSS feed
        env:
          TZ: America/Los_Angeles
        run: |
          # Get the latest commit message to check for !rss flag
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          
          # Check if commit message starts with !rss
          if [[ "$COMMIT_MSG" != "!rss "* ]]; then
            echo "No !rss flag found in commit message, skipping RSS update"
            exit 0
          fi
          
          # Remove !rss prefix
          COMMIT_MSG=${COMMIT_MSG#"!rss "}
          
          # Try to download current RSS
          if ! curl -f -o current-rss.xml https://kingposs.com/rss.xml; then
            echo "WARNING: Could not download RSS from site"
            
            # Check if this might be the first time (no RSS exists yet)
            if curl -s -o /dev/null -w "%{http_code}" https://kingposs.com/rss.xml | grep -q "404"; then
              echo "RSS file doesn't exist on site yet, creating initial RSS"
              {
                echo '<?xml version="1.0" encoding="UTF-8"?>'
                echo '<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">'
                echo '  <channel>'
                echo '    <title>The Possum Den</title>'
                echo '    <link>https://kingposs.com</link>'
                echo '    <description>Combined feed from blog, knowledge base, and main site</description>'
                echo '    <language>en-us</language>'
                echo '    <lastBuildDate>'"$COMMIT_DATE"'</lastBuildDate>'
                echo '    <atom:link href="https://kingposs.com/rss.xml" rel="self" type="application/rss+xml"/>'
                echo '  </channel>'
                echo '</rss>'
              } > current-rss.xml
            else
              echo "Download failed for unknown reason, skipping RSS update"
              rm -f current-rss.xml
              exit 0
            fi
          fi
                    
          echo "Successfully downloaded current RSS"
          
          # Get the latest commit info
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_DATE=$(date -R)
          
          # Extract title and message from commit (now without !rss prefix)
          if [[ "$COMMIT_MSG" == *"|"* ]]; then
            TITLE=${COMMIT_MSG%%|*}
            MESSAGE=${COMMIT_MSG#*|}
          else
            TITLE="Site Update"
            MESSAGE="$COMMIT_MSG"
          fi
          
          # Get list of changed HTML files only
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | grep -E '\.html?$' | head -10)
          
          # Create the new RSS item with proper escaping
          NEW_ITEM="<item>"
          NEW_ITEM="$NEW_ITEM<title>Kingposs.com: $TITLE</title>"
          NEW_ITEM="$NEW_ITEM<link>https://kingposs.com</link>"
          NEW_ITEM="$NEW_ITEM<description><![CDATA["
          NEW_ITEM="$NEW_ITEM<p>$MESSAGE</p>"
          
          # Only add the file list if there are HTML files
          if [[ -n "$CHANGED_FILES" ]]; then
            NEW_ITEM="$NEW_ITEM<p><strong>Updated pages:</strong></p>"
            NEW_ITEM="$NEW_ITEM<ul>"
            
            while IFS= read -r file; do
              if [[ -n "$file" ]]; then
                NEW_ITEM="$NEW_ITEM<li><a href=\"https://kingposs.com/$file\">$file</a></li>"
              fi
            done <<< "$CHANGED_FILES"
            
            NEW_ITEM="$NEW_ITEM</ul>"
          fi
          
          NEW_ITEM="$NEW_ITEM]]></description>"
          NEW_ITEM="$NEW_ITEM<pubDate>$COMMIT_DATE</pubDate>"
          NEW_ITEM="$NEW_ITEM<guid>https://kingposs.com/update/$COMMIT_SHA</guid>"
          NEW_ITEM="$NEW_ITEM</item>"
          
          # Insert new item into RSS
          awk -v new_item="$NEW_ITEM" '
            /<\/channel>/ && !inserted {
              print new_item
              inserted = 1
            }
            {print}
          ' current-rss.xml > rss.xml
          
          # Update lastBuildDate
          sed -i "s|<lastBuildDate>.*</lastBuildDate>|<lastBuildDate>$COMMIT_DATE</lastBuildDate>|" rss.xml

      # Prepare a deployment folder that excludes .git and .github
      - name: Prepare deployment folder
        run: |
          mkdir deploy
          rsync -av --exclude='.git' --exclude='.github' --exclude='.gitignore' --exclude='README.md' --exclude='*.scss' ./ deploy/

      # Remove sourcemappingURL comments from all CSS files in the deploy folder
      - name: Remove sourceMappingURL from CSS files
        run: |
          find deploy -type f -name "*.css" -exec sed -i 's/\/\*# sourceMappingURL=[^*]*\*\///g' {} \;

      - name: Deploy to Neocities
        uses: bcomnes/deploy-to-neocities@v3
        with:
          api_key: ${{ secrets.NEOCITIES_API_TOKEN }}
          cleanup: false
          protected_files: "{assets,json,blog,Thoughts,JS,tags}/**"
          
          neocities_supporter: true
          preview_before_deploy: true
          dist_dir: deploy
